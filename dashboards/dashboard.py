import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from datetime import datetime, timedelta

# ConfiguraÃ§Ã£o da pÃ¡gina
st.set_page_config(
    page_title="Dashboard de DemonstraÃ§Ã£o",
    page_icon="ðŸ“Š",
    layout="wide"
)

# TÃ­tulo do dashboard
st.title("ðŸ“Š Dashboard de DemonstraÃ§Ã£o")
st.markdown("---")

# Criando dados fake de forma mais simples
def generate_fake_data():
    dates = pd.date_range(start='2024-01-01', end='2024-03-31', freq='D')
    np.random.seed(42)
    
    data = {
        'Data': dates,
        'Vendas': np.random.normal(1000, 200, len(dates)),
        'Clientes': np.random.normal(50, 10, len(dates)),
        'SatisfaÃ§Ã£o': np.random.uniform(3.5, 5, len(dates))
    }
    return pd.DataFrame(data)

# Gerando os dados
df = generate_fake_data()

# Sidebar com filtros
st.sidebar.header("Filtros")
data_inicio = st.sidebar.date_input(
    "Data Inicial",
    value=df['Data'].min(),
    min_value=df['Data'].min(),
    max_value=df['Data'].max()
)
data_fim = st.sidebar.date_input(
    "Data Final",
    value=df['Data'].max(),
    min_value=df['Data'].min(),
    max_value=df['Data'].max()
)

# Filtrando dados
df_filtrado = df[(df['Data'].dt.date >= data_inicio) & (df['Data'].dt.date <= data_fim)]

# MÃ©tricas principais
col1, col2, col3 = st.columns(3)
with col1:
    st.metric(
        "Vendas MÃ©dias",
        f"R$ {df_filtrado['Vendas'].mean():,.2f}",
        f"{((df_filtrado['Vendas'].mean() / df['Vendas'].mean() - 1) * 100):,.1f}%"
    )
with col2:
    st.metric(
        "Clientes MÃ©dias",
        f"{df_filtrado['Clientes'].mean():,.0f}",
        f"{((df_filtrado['Clientes'].mean() / df['Clientes'].mean() - 1) * 100):,.1f}%"
    )
with col3:
    st.metric(
        "SatisfaÃ§Ã£o MÃ©dia",
        f"{df_filtrado['SatisfaÃ§Ã£o'].mean():,.1f}",
        f"{((df_filtrado['SatisfaÃ§Ã£o'].mean() / df['SatisfaÃ§Ã£o'].mean() - 1) * 100):,.1f}%"
    )

# GrÃ¡ficos
st.markdown("### ðŸ“ˆ AnÃ¡lise de Vendas")
fig_vendas = px.line(
    df_filtrado,
    x='Data',
    y='Vendas',
    title='Vendas ao Longo do Tempo'
)
st.plotly_chart(fig_vendas, use_container_width=True)

# GrÃ¡fico de barras para clientes
st.markdown("### ðŸ‘¥ AnÃ¡lise de Clientes")
fig_clientes = px.bar(
    df_filtrado,
    x='Data',
    y='Clientes',
    title='NÃºmero de Clientes por Dia'
)
st.plotly_chart(fig_clientes, use_container_width=True)

# GrÃ¡fico de satisfaÃ§Ã£o
st.markdown("### ðŸ˜Š SatisfaÃ§Ã£o dos Clientes")
fig_satisfacao = px.scatter(
    df_filtrado,
    x='Data',
    y='SatisfaÃ§Ã£o',
    title='NÃ­vel de SatisfaÃ§Ã£o dos Clientes',
    color='SatisfaÃ§Ã£o',
    color_continuous_scale='RdYlGn'
)
st.plotly_chart(fig_satisfacao, use_container_width=True)

# Tabela de dados
st.markdown("### ðŸ“‹ Dados Detalhados")
st.dataframe(
    df_filtrado.style.format({
        'Vendas': 'R$ {:,.2f}',
        'Clientes': '{:,.0f}',
        'SatisfaÃ§Ã£o': '{:,.1f}'
    }),
    use_container_width=True
)
